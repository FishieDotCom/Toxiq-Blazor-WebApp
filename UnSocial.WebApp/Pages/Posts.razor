@page "/posts/"
@page "/posts/{postId:guid}"
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using Toxiq.Mobile.Dto
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@using System.Web;
@using UnSocial.WebApp.Components
@inherits ComponentBase
@inject AppState AppState
@using Microsoft.FluentUI.AspNetCore.Components;

<PageTitle>Toxiq</PageTitle>

<HeadContent>
    <meta name="description" content="Where Cool Kids Hangout">
    <meta name="og:description" content="Where Cool Kids Hangout">
    <meta name="og:title" content="Toxiq">
    <meta property="og:site_name" content="Toxiq">
    <meta name="og:image" content="https://toxiq.xyz/images/social-preview-post.jpg">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="640" />
</HeadContent>


<style>

    .post-content {
    font-weight: 500;
    color: white;
    }

    .comment-container {
    width: 100%;
    background-color: #1f1f1f;
    box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    }

    .comment-input {
    background: #282828;
    flex: 1;
    padding: 10px;
    width: 95%;
    color: white;
    border: 1px solid #282828;
    border-radius: 15px;
    margin-right: 10px;
    }

    .comment-submit {
    padding: 10px 20px;
    background-color: #1f1f1f;
    color: white;
    border: white;
    border-width: thin;
    border-style: solid;
    border-radius: 10px;
    }

    .content {
    padding-bottom: 70px; /* To ensure the content doesn't overlap the input */
    }
</style>
<div style="max-width: 500px;margin: 0 auto;">
    @if (_post == null)
    {
        <PostSkeletonComponent></PostSkeletonComponent>
    }
    else
    {
        <PostComponentV2 _post="@_post" FullPost="true" />

        <div class="content" @ref="inputElement">
            @if (Comments == null)
            { }
            else
            {
                if (ApiService.AuthService.IsAuth)
                {
                    <div class="comment-container">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">

                            @if (IsReply)
                            {
                                <div style="display: flex;justify-content: space-between;margin: 0 10px;width:91%;">
                                    <p style="margin-bottom:5px; text-align: left;opacity: 0.9;">
                                        replying to @ReplySource.Name
                                    </p>

                                    <p style=" text-align: left;" @onclick="()=>CancelReply()">Cancel</p>
                                </div>

                            }

                            <textarea type="text" @ref="inputElement" disabled="@IsBusy" @onsubmit="()=>SubmitComment()" placeholder="Write a comment..." class="comment-input" autocomplete="off" id="commentInput" @bind="CommentContent" />

                        </FluentStack>
                        <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Send())" style="height: 45px;"
                        Title="Globe" disabled="@IsBusy" Appearance="Appearance.Outline" Color="Color.Error"
                        OnClick="@(() => SubmitComment())" />
                    </div>
                }
                else
                {
                    <FluentButton style="width: 100%;" @onclick="OpenTele" Appearance="Appearance.Accent">Login With Telegram to comment</FluentButton>
                }
                <div style="gap:15px; display:flex;flex-direction:column;margin-top:15px;">
                    @foreach (var item in Comments)
                    {
                        <CommentComponent CommentData="item"
                                OnReply="() => InitReply(item)"
                                IsReply="false" />

                        @foreach (var reply in item.Replies)
                        {
                            <CommentComponent CommentData="reply"
                                    OnReply="() => InitReplyWithMention(item, reply.UserName)"
                                    IsReply="true" />
                        }
                    }
                </div>
            }
        </div>
    }

</div>


@code {
    [Parameter]
    public Guid PostId { get; set; }


    private BasePost _post { get; set; }

    bool IsReply = false;
    Comment ReplySource;

    private List<Comment> Comments { get; set; } = new List<Comment>();

    private UserProfile myProfile = new();

    private string CommentContent = string.Empty;
    private bool IsBusy = false;
    private ElementReference inputElement;
    private double initialWindowHeight;

    private string TopColor = "black";
    private string BottomColor = "black";



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addJavaScriptFunction");

            AppState.OnChange += LoadProfile;

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = HttpUtility.ParseQueryString(uri.Query);

            /// Docs
            /// https://github.com/FishieDotCom/Toxiq-API-Docs/blob/main/Docs/Posts.md#tg-url
            /// this code is to handle the edge case to get postid when opening via telegram
            /// https://docs.telegram-mini-apps.com/platform/start-parameter
            try
            {
                PostId = Guid.Parse(query["tgWebAppStartParam"]);
            }
            catch
            { }

            _post = await ApiService.PostService.GetPost(PostId);

            if (_post == null)
            {
                _post = new BasePost
                    {
                        Name = "🥴",
                        UserName = "@404",
                        Content = "NOT FOUND",
                        PostColor = "black",
                    };

                Comments = null;
                StateHasChanged();
                return;
            }

            var Commentresult = await ApiService.CommentService.GetPostComments(new GetCommentDto
                {
                    Count = 100,
                    Page = 1,
                    Id = PostId,
                    IsReply = false,
                    Sort = 0,
                });

            Comments = Commentresult.Data;

            foreach (var comment in Comments)
            {
                comment.Content = ConvertUserTags(comment.Content);

                comment.Content = TransformText(comment.Content);

                if (comment.ReplyCount != 0)
                {
                    var replyReulst = await ApiService.CommentService.GetPostComments(new GetCommentDto
                        {
                            Count = 100,
                            Page = 1,
                            Id = comment.Id,
                            IsReply = true,
                            Sort = 0,
                        });

                    foreach (var reply in replyReulst.Data)
                    {
                        reply.Content = ConvertUserTags(reply.Content);
                        reply.Content = TransformText(reply.Content);

                        comment.Replies.Add(reply);
                    }
                }
            }

            StateHasChanged();
        }
    }

    async void LoadProfile()
    {
        myProfile = await ApiService.UserService.GetMe();
        StateHasChanged();
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    static string ConvertUserTags(string input)
    {
        if (input == null)
            return "";
        string pattern = @"\[@([^\]]+)\]\(user:[^\)]+\)";
        // Replace the matched pattern with #username
        string result = Regex.Replace(input, pattern, "#$1");
        return result;
    }

    private string TransformText(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        // Regex to find hashtags
        var regex = new System.Text.RegularExpressions.Regex(@"#(\w+)");
        var transformedText = regex.Replace(input, m => $"<a href=\"profile/{m.Groups[1].Value}\" style=\"font-weight: 700; color:dodgerblue;text-decoration: none;\">{m.Value}</a>");

        return transformedText;
    }

    private void VisitOP(string username)
    {
        Navigation.NavigateTo($"/profile/{username}");
    }

    private void AppendMention(Comment comment)
    {

        CommentContent = CommentContent + "#" + comment.UserName + " ";
    }

    private async void InitReply(Comment comment)
    {
         if (comment.Id == Guid.Empty)
            return;

        ReplySource = comment;
        IsReply = true;

        await FocusInput();
    }

    private async void InitReplyWithMention(Comment comment, string mention)
    {
        if (comment.Id == Guid.Empty)
            return;
        CommentContent = CommentContent + "#" + mention + " ";
        InitReply(comment);
    }

    private async Task FocusInput()
    {
        await JSRuntime.InvokeVoidAsync("focusElement", inputElement);
    }

    private void CancelReply()
    {
        ReplySource = null;
        IsReply = false;
    }

    private async Task SubmitComment()
    {
        await inputElement.FocusAsync();

        //myProfile = await ApiService.UserService.GetMe();

        if (IsValid())
        {
            IsBusy = true;
            Comment commentDto = new Comment
                {

                    Content = CommentContent,
                    DateCreated = DateTime.Now,
                    UserName = myProfile.UserName,
                    Name = myProfile.Name,
                    Id = Guid.Empty,
                    IsReply = false,
                    PostId = _post.Id,
                };

            if (IsReply)
            {
                commentDto.IsReply = true;
                if (ReplySource.IsReply == true)
                    commentDto.RepliedTo = ReplySource.RepliedTo;
                else
                    commentDto.RepliedTo = ReplySource.Id;

                Comments.Where(x => x.Id == commentDto.RepliedTo).FirstOrDefault().Replies.Add(commentDto);

            }
            else
            {
                Comments.Insert(0, commentDto);
            }

            CommentContent = string.Empty;
            IsReply = false;



            _post.CommentCount = _post.CommentCount + 1;

            StateHasChanged();

            var m = await ApiService.CommentService.CommentOnPost(commentDto);

            if (IsReply == false)
                Comments[0].Id = m.Id;
        }

        IsBusy = false;
        await inputElement.FocusAsync(); //handle ios keyboard bugs


        StateHasChanged();
    }

    private bool IsValid()
    {
        if (string.IsNullOrWhiteSpace(CommentContent))
            return false;

        if (CommentContent == null)
            return false;

        if (CommentContent == string.Empty)
            return false;

        if (CommentContent == "")
            return false;

        return true;
    }

    private void OpenTele()
    {
        Navigation.NavigateTo($"https://t.me/Toxiq_bot/posts?startapp={_post.Id}");
    }


}
