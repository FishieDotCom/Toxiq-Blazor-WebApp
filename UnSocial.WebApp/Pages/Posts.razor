@page "/posts/"
@page "/posts/{postId:guid}"
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using Toxiq.Mobile.Dto
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@using System.Web;
@using UnSocial.WebApp.Components
@inherits ComponentBase
@inject AppState AppState
@using Microsoft.FluentUI.AspNetCore.Components;

<PageTitle>Toxiq</PageTitle>

<HeadContent>
    <meta name="description" content="Where Cool Kids Hangout">
    <meta name="og:description" content="Where Cool Kids Hangout">
    <meta name="og:title" content="Toxiq">
    <meta property="og:site_name" content="Toxiq">
    <meta name="og:image" content="https://api.toxiq.xyz/images/social-preview-post.jpg">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="640" />
</HeadContent>


<style>

    .post-content {
        font-weight: 500;
        color: white;
    }

    .comment-container {
        width: 100%;
        background-color: #1f1f1f;
        box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
    }

    .comment-input {
        flex: 1;
        padding: 10px;
        color: white;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 10px;
    }

    .comment-submit {
        padding: 10px 20px;
        background-color: #1f1f1f;
        color: white;
        border: white;
        border-width: thin;
        border-style: solid;
        border-radius: 10px;
    }

    .content {
        padding-bottom: 70px; /* To ensure the content doesn't overlap the input */
    }
</style>
<div style="max-width: 500px;margin: 0 auto;">
    @if (_post == null)
    {
        <MSkeletonLoader MaxWidth="400" Class="mx-auto" Dark
                         Type="image,card-avatar">
        </MSkeletonLoader>
    }
    else
    {



        <PostComponent _post="@_post" FullPost="true" />
        @* <MCard Class="mx-auto" Color="@_post.PostColor" Dark MaxWidth="400" style="border-radius:20px">
    <MCardTitle>
    <span class="text-h6 font-weight-light">@_post.Name</span>
    <span class="text-h6 font-weight-light" style="opacity: 0.7; font-weight: 300; font-size: smaller;">@@</span>
    <span class="text-h6 font-weight-light" style="opacity: 0.7; font-weight: 300; font-size: smaller;" @onclick="()=>VisitOP(_post.UserName)">@_post.UserName</span>
    </MCardTitle>
    @if (_post.PostMedia.Count != 0)
    {
    <MImage style="margin-right:5px;margin-left:5px;border-radius: 15px;" Src="@_post.PostMedia[0].MediaPath" MaxHeight="512" MaxWidth="512" AspectRatio="1/1d">
    <PlaceholderContent>
    <MProgressCircular Indeterminate Align="@AlignTypes.Center" Justify="@JustifyTypes.Center" Class="text-center"></MProgressCircular>
    </PlaceholderContent>
    </MImage>
    }

    <MCardText>
    <p style=" white-space: pre-wrap;" Class="text-h5 post-content">@_post.Content</p>
    </MCardText>
    </MCard> *@

        <div class="content" @ref="inputElement">
            @if (Comments == null)
            { }
            else
            {
                if (ApiService.AuthService.IsAuth)
                {
                    <div class="comment-container">

                        <input type="text" disabled="@IsBusy" @onsubmit="()=>SubmitComment()" placeholder="Write a comment..." class="comment-input" autocomplete="off" id="commentInput" @bind="CommentContent" />
                        <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Send())" style="height: 45px;"
                                      Title="Globe" disabled="@IsBusy" Appearance="Appearance.Outline" Color="Color.Error"
                                      OnClick="@(() => SubmitComment())" />
                    </div>
                }
                else
                {
                    <FluentButton style="width: 100%;" @onclick="OpenTele" Appearance="Appearance.Accent">Login With Telegram to comment</FluentButton>
                }
                <div style="gap:15px; display:flex;flex-direction:column;margin-top:15px;">
                    @foreach (var item in Comments)
                    {
                        <div class="TypeDefault" style="justify-content: flex-start; align-items: flex-start;  display: inline-flex">
                            <div class="Frame1" style="padding: 15px; background: #282828; border-radius: 25px; flex-direction: column; justify-content: flex-start; align-items: flex-start; gap: 8px; display: flex">
                                <div class="NameSection" @onclick="()=>AppendMention(item)" style="height: 18px; justify-content: flex-start; align-items: center; gap: 5px; display: inline-flex">
                                    <div style="height: 14px; color: white; font-size: 14px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@item.Name</div>
                                    <div class="Username" style="height: 18px; color: rgba(255, 255, 255, 0.60); font-size: 14px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@@@item.UserName</div>
                                </div>
                                <div class="Content" style="color: white; font-size: 14px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@item.Content</div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }

</div>


@code {
    [Parameter]
    public Guid PostId { get; set; }


    private BasePost _post { get; set; }

    private BasePost replypost { get; set; }

    private List<Comment> Comments { get; set; } = new List<Comment>();

    private UserProfile myProfile = new();

    private string CommentContent = string.Empty;
    private bool IsBusy = false;
    private ElementReference inputElement;
    private double initialWindowHeight;

    private string TopColor = "black";
    private string BottomColor = "black";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.OnChange += LoadProfile;



            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = HttpUtility.ParseQueryString(uri.Query);

            /// Docs
            /// https://github.com/FishieDotCom/Toxiq-API-Docs/blob/main/Docs/Posts.md#tg-url
            /// this code is to handle the edge case to get postid when opening via telegram
            /// https://docs.telegram-mini-apps.com/platform/start-parameter
            try
            {
                PostId = Guid.Parse(query["tgWebAppStartParam"]);
            }
            catch
            { }

            _post = await ApiService.PostService.GetPost(PostId);

            switch (_post.Type)
            {
                case PostType.Burn:
                    TopColor = "black"; BottomColor = _post.PostColor;
                    break;
                case PostType.Wall:
                    TopColor = _post.PostColor; BottomColor = _post.PostColor;
                    break;
                case PostType.Text:
                    TopColor = "black"; BottomColor = "black";
                    break;
            }

            switch (_post.ReplyType)
            {
                case ReplyType.Text:
                    replypost = await ApiService.PostService.GetPost((Guid)_post.ReplyRefId);
                    break;
                case ReplyType.Note:
                    // var temp = await ApiService.NotesService.GetNote((Guid)ParentPost.ReplyRefId);
                    // replypost.Content = temp.Content;
                    // replypost.UserName = "Anon";
                    // replypost.Name = "";
                    // _border.BackgroundColor = Color.FromArgb(ParentPost.PostColor);
                    break;
                case ReplyType.Comment:
                // var tempc = await ApiService.CommentService.Getc((Guid)_post.ReplyRefId);
                // replypost.Content = tempc.Content;
                // replypost.Name = tempc.Name;
                // replypost.UserName = tempc.UserName;
                // TypeIcon.Icon(new MauiIcon() { Icon = FluentIcons.Comment48, IconSize = 18 }.Icon);
                // break;
                default:
                    break;
            }

            var Commentresult = await ApiService.CommentService.GetPostComments(new GetCommentDto
                {
                    Count = 100,
                    Page = 1,
                    Id = PostId,
                    IsReply = false,
                    Sort = 0,
                });



            Comments = Commentresult.Data;

            foreach (var comment in Comments)
            {
                comment.Content = ConvertUserTags(comment.Content);
            }



            StateHasChanged();

        }
    }

    async void LoadProfile()
    {
        myProfile = await ApiService.UserService.GetMe();
        StateHasChanged();
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    static string ConvertUserTags(string input)
    {
        string pattern = @"\[@([^\]]+)\]\(user:[^\)]+\)";
        // Replace the matched pattern with #username
        string result = Regex.Replace(input, pattern, "#$1");
        return result;
    }

    private void VisitOP(string username)
    {
        Navigation.NavigateTo($"/profile/{username}");
    }

    private void AppendMention(Comment comment)
    {
        CommentContent = CommentContent + "#" + comment.UserName + " ";
    }

    private async Task SubmitComment()
    {
        await inputElement.FocusAsync();

        //myProfile = await ApiService.UserService.GetMe();

        if (IsValid())
        {
            IsBusy = true;
            Comment commentDto = new Comment
                {
                    Content = CommentContent,
                    DateCreated = DateTime.Now,
                    UserName = myProfile.UserName,
                    Name = myProfile.Name,
                    Id = Guid.NewGuid(),
                    IsReply = false,
                    PostId = _post.Id,
                };

            CommentContent = string.Empty;
            Comments.Insert(0, commentDto);

            _post.CommentCount = _post.CommentCount + 1;

            StateHasChanged();

            await ApiService.CommentService.CommentOnPost(commentDto);

        }

        IsBusy = false;
        await inputElement.FocusAsync(); //handle ios keyboard bugs


        StateHasChanged();
    }

    private bool IsValid()
    {
        if (string.IsNullOrWhiteSpace(CommentContent))
            return false;

        if (CommentContent == null)
            return false;

        if (CommentContent == string.Empty)
            return false;

        if (CommentContent == "")
            return false;

        return true;
    }

    private void OpenTele()
    {
        Navigation.NavigateTo($"https://t.me/Toxiq_bot/posts?startapp={_post.Id}");
    }


}
