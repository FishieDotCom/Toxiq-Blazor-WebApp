@page "/profile/{username}"
@using Toxiq.Mobile.Dto
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@using System.Web;
@inject AppState AppState

<PageTitle>@(UserProfile?.Name ?? "Profile") - Toxiq</PageTitle>

<HeadContent>
    <meta name="description" content="Where Cool Kids Hangout">
    <meta name="og:description" content="Where Cool Kids Hangout">
    <meta property="og:site_name" content="Toxiq">
    <meta name="og:title" content="Toxiq">
    <meta name="og:image" content="https://toxiq.xyz/images/social-preview-default.jpg">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="640" />
</HeadContent>

<style>
    .profile-background {
        border-radius: 20px;
        margin: 10px;
        padding: 20px;
        min-height: 600px;
        position: relative;
        transition: background-color 0.3s ease;
    }

    .profile-header {
        margin-bottom: 25px;
    }

    .username {
        font-size: 20px;
        font-weight: bold;
        color: white;
    }

    .bio {
        font-size: 15px;
        color: white;
        opacity: 0.8;
        margin-top: 5px;
    }

    .chips-container {
        display: flex;
        gap: 10px;
        margin: 15px 0;
        flex-wrap: wrap;
    }

    .chip {
        background-color: rgba(255, 255, 255, 0.2);
        color: white;
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 14px;
        display: inline-flex;
        align-items: center;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin: 25px 0;
        max-width: 250px;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-weight: bold;
        font-size: 18px;
        color: white;
    }

    .stat-label {
        font-size: 14px;
        color: white;
        opacity: 0.8;
        margin-top: 5px;
    }

    .achievements-section {
        margin: 25px 0;
    }

    .achievements-title {
        font-size: 20px;
        font-weight: bold;
        color: white;
        margin-bottom: 15px;
    }

    .achievements-scroll {
        display: flex;
        gap: 10px;
        overflow-x: auto;
        padding-bottom: 10px;
        -webkit-overflow-scrolling: touch;
        scrollbar-width: none;
    }

        .achievements-scroll::-webkit-scrollbar {
            display: none;
        }

    .achievement-item {
        min-width: 70px;
        height: 70px;
        background-color: inherit;
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        cursor: pointer;
        transition: transform 0.2s;
    }

        .achievement-item:hover {
            transform: scale(1.05);
        }

    .bottom-buttons {
        position: absolute;
        bottom: 20px;
        left: 20px;
        right: 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .action-button {
        background-color: rgba(0, 0, 0, 0.3);
        color: white;
        border: none;
        padding: 15px;
        border-radius: 10px;
        font-size: 15px;
        cursor: pointer;
        transition: all 0.2s;
        width: 100%;
    }

        .action-button:hover {
            background-color: rgba(0, 0, 0, 0.5);
            transform: scale(0.98);
        }

    .note-input-container {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: #1f1f1f;
        padding: 20px;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        transform: translateY(100%);
        transition: transform 0.3s ease;
        z-index: 1000;
    }

        .note-input-container.active {
            transform: translateY(0);
        }

    .note-input {
        width: 100%;
        background-color: #2a2a2a;
        border: 1px solid #444;
        border-radius: 10px;
        padding: 15px;
        color: white;
        font-size: 14px;
        resize: none;
        min-height: 80px;
    }

    .note-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .achievement-detail {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: inherit;
        padding: 30px;
        border-top-left-radius: 30px;
        border-top-right-radius: 30px;
        transform: translateY(100%);
        transition: transform 0.3s ease;
        z-index: 1000;
        text-align: center;
        max-height: 50vh;
    }

        .achievement-detail.active {
            transform: translateY(0);
        }

    .achievement-detail-icon {
        font-size: 72px;
        margin-bottom: 10px;
    }

    .achievement-detail-name {
        font-size: 24px;
        font-weight: bold;
        color: white;
        margin-bottom: 10px;
    }

    .achievement-detail-description {
        color: white;
        opacity: 0.8;
        margin-bottom: 10px;
    }

    .achievement-detail-date {
        color: white;
        opacity: 0.5;
        font-size: 14px;
    }

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: none;
        z-index: 999;
    }

        .overlay.active {
            display: block;
        }
</style>

    @if (UserProfile == null)
    {
        <MSkeletonLoader MaxWidth="500" Class="mx-auto" Dark Type="card-avatar">
        </MSkeletonLoader>
    }
    else
    {
        <div class="profile-background" style="background-color: @UserProfile.ProfileColor">
            <!-- Profile Header -->
            <div class="profile-header">
                <div class="username">@@@UserProfile.UserName</div>
                @if (!string.IsNullOrWhiteSpace(UserProfile.Bio))
                {
                    <div class="bio">@UserProfile.Bio</div>
                }
            </div>

            <!-- Chips -->
            <div class="chips-container">
                @if (UserProfile.PubDateOfBirth != DateTime.MinValue)
                {
                    <div class="chip">@UserProfile.PubDateOfBirth.Year</div>
                }
                @if (UserProfile.Gender != null && UserProfile.Gender != Gender.Null)
                {
                    <div class="chip">@GetGenderEmoji(UserProfile.Gender.Value)</div>
                }
                <div class="chip">💖</div>
            </div>

            <!-- Stats -->
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-value">@UserProfile.Aura</div>
                    <div class="stat-label">Aura</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">@UserProfile.Followers</div>
                    <div class="stat-label">Followers</div>
                </div>
            </div>

            <!-- Achievements -->
            <div class="achievements-section">
                <div class="achievements-title">Achievements</div>
                <div class="achievements-scroll">
                    @foreach (var achievement in UserProfile.Achievements)
                    {
                        <div class="achievement-item" @onclick="() => ShowAchievementDetail(achievement)">
                            @achievement.Icon
                        </div>
                    }
                </div>
            </div>

            <!-- Bottom Action Buttons -->
            <div class="bottom-buttons">
                @if (IsMe)
                {
                    <button class="action-button" @onclick="ViewPosts">Posts</button>
                    <button class="action-button" @onclick="ViewNotes">Notes</button>
                    <button class="action-button" @onclick="OpenSettings">Settings</button>
                }
                else
                {
                    <button class="action-button" @onclick="ViewPosts">Posts</button>
                    <button class="action-button" @onclick="() => ShowNoteInput = true">Send Note</button>
                }
            </div>
        </div>

        <!-- Note Input Sheet -->
        <div class="@($"note-input-container {(ShowNoteInput ? "active" : "")}")">
            <h3 style="color: white; margin-bottom: 15px;">Send an anonymous note</h3>
            <textarea class="note-input" @bind="NoteContent" placeholder="Write your note..." maxlength="70"></textarea>
            <div class="note-actions">
                <button class="action-button" style="flex: 1" @onclick="SendNote" disabled="@IsSendingNote">
                    @(IsSendingNote ? "Sending..." : "Send")
                </button>
                <button class="action-button" style="flex: 1" @onclick="() => ShowNoteInput = false">Cancel</button>
            </div>
        </div>

        <!-- Achievement Detail Sheet -->
        <div class="@($"achievement-detail {(SelectedAchievement != null ? "active" : "")}")"
             style="background-color: @UserProfile.ProfileColor">
            @if (SelectedAchievement != null)
            {
                <div class="achievement-detail-icon">@SelectedAchievement.Icon</div>
                <div class="achievement-detail-name">@SelectedAchievement.Name</div>
                <div class="achievement-detail-description">@SelectedAchievement.Description</div>
                <div class="achievement-detail-date">@SelectedAchievement.DateUnlocked.ToString("dd MMMM yyyy")</div>
            }
        </div>

        <!-- Overlay for sheets -->
        <div class="@($"overlay {(ShowNoteInput || SelectedAchievement != null ? "active" : "")}")"
             @onclick="CloseAllSheets"></div>
    }

@code {
    [Parameter]
    public string? username { get; set; }

    private UserProfile UserProfile = null;
    private UserProfile myProfile = new();
    private bool IsMe = false;
    private bool ShowNoteInput = false;
    private string NoteContent = string.Empty;
    private bool IsSendingNote = false;
    private Achievement SelectedAchievement = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.OnChange += LoadProfile;
            LoadProfile();
        }
    }

    async void LoadProfile()
    {
        myProfile = await ApiService.UserService.GetMe();
        UserProfile = await ApiService.UserService.GetUser(username);

        if (UserProfile != null && myProfile != null)
        {
            IsMe = UserProfile.UserName == myProfile.UserName;
        }

        StateHasChanged();
    }

    private string GetGenderEmoji(Gender gender)
    {
        return gender switch
        {
            Gender.Male => "♂️",
            Gender.Female => "♀️",
            _ => ""
        };
    }

    private void ShowAchievementDetail(Achievement achievement)
    {
        SelectedAchievement = achievement;
        StateHasChanged();
    }

    private void CloseAllSheets()
    {
        ShowNoteInput = false;
        SelectedAchievement = null;
        StateHasChanged();
    }

    private async Task SendNote()
    {
        if (string.IsNullOrWhiteSpace(NoteContent))
            return;

        IsSendingNote = true;
        StateHasChanged();

        try
        {
            await ApiService.NotesService.SendNote(new NoteDto
                {
                    Recipient = UserProfile.Id,
                    Content = NoteContent
                });

            ShowNoteInput = false;
            NoteContent = string.Empty;
            await JSRuntime.InvokeVoidAsync("showAlert", "Note sent successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showAlert", "Failed to send note. Please try again.");
        }
        finally
        {
            IsSendingNote = false;
            StateHasChanged();
        }
    }

    private void ViewPosts()
    {
        // Navigate to posts view - you'll need to implement this page
        Navigation.NavigateTo($"/posts/user/{UserProfile.UserName}");
    }

    private void ViewNotes()
    {
        // Navigate to notes view - you'll need to implement this page
        Navigation.NavigateTo("/notes");
    }

    private void OpenSettings()
    {
        // Navigate to settings - you'll need to implement this page
        Navigation.NavigateTo("/changeColor");
    }

    public void Dispose()
    {
        AppState.OnChange -= LoadProfile;
    }
}