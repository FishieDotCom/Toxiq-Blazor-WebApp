@page "/profile/{username}"
@using Toxiq.Mobile.Dto
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@using System.Web;
@inject AppState AppState

<PageTitle>Profile</PageTitle>

<HeadContent>
    <meta name="description" content="Where Cool Kids Hangout">
    <meta name="og:description" content="Where Cool Kids Hangout">
    <meta property="og:site_name" content="Toxiq">
    <meta name="og:title" content="Toxiq">
    <meta name="og:image" content="https://api.toxiq.xyz/images/social-preview-default.jpg">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="640" />
</HeadContent>


<style>

    .post-content {
        font-weight: 500;
        color: white;
    }

    .comment-container {
        width: 100%;
        background-color: #1f1f1f;
        box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
    }

    .comment-input {
        flex: 1;
        padding: 10px;
        color: white;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 10px;
    }

    .comment-submit {
        padding: 10px 20px;
        background-color: #1f1f1f;
        color: white;
        border: white;
        border-width: thin;
        border-style: solid;
        border-radius: 10px;
    }

    .content {
        padding-bottom: 70px; /* To ensure the content doesn't overlap the input */
    }
</style>

@if (myProfile == null)
{
    <MSkeletonLoader MaxWidth="400" Class="mx-auto" Dark
                     Type="card-avatar">
    </MSkeletonLoader>
}
else
{

    <MCard Class="mx-auto" Color="@myProfile.ProfileColor" Dark MaxWidth="400" style="border-radius:20px">
        <MCardTitle>
            <p class="text-h6 font-weight-light">@myProfile.Name</p>
            <p class="text-h6 font-weight-light" style="opacity: 1; font-weight: 500; font-size: x-large;color: white;">@@@myProfile.UserName</p>
            <MListItemTitle>
                @myProfile.Bio
            </MListItemTitle>
        </MCardTitle>
    </MCard>



    <MSubheader Dark>
        Achievements
    </MSubheader>

    <MCard Class="mx-auto"
           Tile>
        <MList Dark>
            @foreach (var item in myProfile.Achievements)
            {
                <MListItem Dark>
                    <MListItemAvatar>
                        <MLabel>@item.Icon</MLabel>
                    </MListItemAvatar>

                    <MListItemContent>
                        <MListItemTitle>@((MarkupString)item.Name)</MListItemTitle>
                        <MListItemSubtitle>@((MarkupString)item.Description)</MListItemSubtitle>
                        <MListItemSubtitle Style="opacity:0.5;">@((MarkupString)item.DateUnlocked.ToString("dd-MM-yyyy"))</MListItemSubtitle>
                    </MListItemContent>
                </MListItem>
            }
        </MList>
    </MCard>
}


@code {
    [Parameter]
    public string? username { get; set; }

    private bool IsAuth = false;

    private List<Comment> Comments { get; set; } = new List<Comment>();
    private UserProfile myProfile = null;

    private string CommentContent = string.Empty;
    private bool IsBusy = false;
    private ElementReference inputElement;
    private double initialWindowHeight;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.OnChange += LoadProfile;

            myProfile = await ApiService.UserService.GetUser(username);

            StateHasChanged();
        }

    }

    async void LoadProfile()
    {
        myProfile = await ApiService.UserService.GetMe();
        StateHasChanged();
    }

}
