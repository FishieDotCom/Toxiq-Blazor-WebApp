@page "/profile/{username}"
@using Toxiq.Mobile.Dto
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@using System.Web;
@inject AppState AppState

<PageTitle>Profile</PageTitle>

<HeadContent>
    <meta name="description" content="Where Cool Kids Hangout">
    <meta name="og:description" content="Where Cool Kids Hangout">
    <meta property="og:site_name" content="Toxiq">
    <meta name="og:title" content="Toxiq">
    <meta name="og:image" content="https://api.toxiq.xyz/images/social-preview-default.jpg">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="640" />
</HeadContent>


<style>
    .tab-spacing {
        margin-left: 10px;
        margin-right: 10px;
    }

    .post-content {
        font-weight: 500;
        color: white;
    }

    .comment-container {
        width: 100%;
        background-color: #1f1f1f;
        box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
    }

    .comment-input {
        flex: 1;
        padding: 10px;
        color: white;
        border: 1px solid #ccc;
        border-radius: 10px;
        margin-right: 10px;
    }

    .comment-submit {
        padding: 10px 20px;
        background-color: #1f1f1f;
        color: white;
        border: white;
        border-width: thin;
        border-style: solid;
        border-radius: 10px;
    }

    .content {
        padding-bottom: 70px; /* To ensure the content doesn't overlap the input */
    }
</style>

@if (UserProfile == null)
{
    <MSkeletonLoader MaxWidth="400" Class="mx-auto" Dark
                     Type="card-avatar">
    </MSkeletonLoader>
}
else
{
    <div class="TypeBurnPost" style="clip-path: border-box;min-width: 100%; padding: 15px; background: linear-gradient(0deg, @UserProfile.ProfileColor 0%, @UserProfile.ProfileColor 100%); border-radius: 20px; border: 3px @UserProfile.ProfileColor solid; flex-direction: column; justify-content: flex-start; align-items: flex-start; gap: 10px; display: inline-flex">
        <div style=" color: white; font-size: 25px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@UserProfile.Name</div>
        <div>
            <div class="Username" style="color: white; font-size: 20px; font-family: Roboto; font-weight: 900; word-wrap: break-word">@@@UserProfile.UserName</div>
            <div class="Bio" style="white-space: pre-wrap;align-self: stretch; color: white; font-size: 14px; font-family: Roboto;  word-wrap: break-word;opacity:0.8;">@UserProfile.Bio</div>
        </div>
    </div>


    @if (!IsMe)
    {
        <button @onclick="()=>SendNote()" class="button" style="width:100%;margin-top:15px" disabled="@IsBusy">
            <span style="color:black;">Send Note</span>
        </button>
    }

    <FluentTabs ActiveTabId="tab-3">
        @if (IsMe)
        {
            <FluentTab Id="tab-2">
                <Header>
                    <span class="tab-spacing">Notes</span>
                </Header>
                <Content>
                    Coming soon  
                </Content>
            </FluentTab>
        }

        <FluentTab Id="tab-3">
            <Header>
                <span class="tab-spacing">About</span>
            </Header>
            <Content>
                <MSubheader Dark>
                    Achievements
                </MSubheader>

                <MCard Class="mx-auto" Tile>
                    <MList Dark>
                        @foreach (var item in UserProfile.Achievements)
                        {
                            <MListItem Dark>
                                <MListItemAvatar>
                                    <MLabel>@item.Icon</MLabel>
                                </MListItemAvatar>

                                <MListItemContent>
                                    <MListItemTitle>@((MarkupString)item.Name)</MListItemTitle>
                                    <MListItemSubtitle>@((MarkupString)item.Description)</MListItemSubtitle>
                                    <MListItemSubtitle Style="opacity:0.5;">@((MarkupString)item.DateUnlocked.ToString("dd-MM-yyyy"))</MListItemSubtitle>
                                </MListItemContent>
                            </MListItem>
                        }
                    </MList>
                </MCard>
            </Content>
        </FluentTab>
    </FluentTabs>



}


@code {
    [Parameter]
    public string? username { get; set; }

    private bool IsAuth = false;

    private UserProfile UserProfile = null;
    private UserProfile myProfile = new();
    private string CommentContent = string.Empty;
    private bool IsBusy = false;
    private ElementReference inputElement;
    private double initialWindowHeight;

    bool IsMe = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            AppState.OnChange += LoadProfile;
            //await  LoadProfile();
            //StateHasChanged();
        }
    }



    async void LoadProfile()
    {
        myProfile = await ApiService.UserService.GetMe();
        UserProfile = await ApiService.UserService.GetUser(username);
        try
        {
            if (UserProfile.UserName == myProfile.UserName)
            {
                IsMe = true;
            }
        }
        catch
        {

        }

        StateHasChanged();
    }


    private void SendNote()
    {
        Navigation.NavigateTo($"/notes/{UserProfile.UserName}");
    }
}
