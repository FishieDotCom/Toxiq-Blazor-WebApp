@page "/"
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using Toxiq.Mobile.Dto
@using UnSocial.WebApp.Components
@inject AppState AppState


<PageTitle>Toxiq</PageTitle>

<HeadContent>
    <meta name="description" content="Where Cool Kids Hangout">
    <meta name="og:description" content="Where Cool Kids Hangout">
    <meta property="og:site_name" content="Toxiq">
    
    <meta name="og:title" content="Toxiq">
    <meta name="og:image" content="https://api.toxiq.xyz/images/social-preview-default.jpg">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="640" />
</HeadContent>



<MCard Width="500"
        Dark
       Class="overflow-auto"
       Style="margin: 0 auto"
       Id="infinite-scroll-usage">
    <MList Dark >

        @if(Posts.Count ==0)
        {

      
            <PostSkeletonComponent Style="margin-bottom : 10px;"></PostSkeletonComponent>
            <PostSkeletonComponent Style="margin-bottom : 10px;"></PostSkeletonComponent>
            <PostSkeletonComponent Style="margin-bottom : 10px;"></PostSkeletonComponent>
            <PostSkeletonComponent Style="margin-bottom : 10px;"></PostSkeletonComponent>

      
        }

        @foreach (var _post in Posts)
        {

            <div style="margin-bottom : 10px;" @onclick="()=>VisitPost(_post.Id)">
                <PostComponent _post="@_post" FullPost="false"  />
           
               </div>      
        }
    </MList>
    <MInfiniteScroll OnLoad="@OnLoad" Threshold="100"
                     Parent="#infinite-scroll-usage">
    </MInfiniteScroll>
</MCard>



@code {

    private MCard? _card;
    private int _count;
    private bool _mockError;
    private List<BasePost> Posts = new();


    SearchResultDto<BasePost> result = new SearchResultDto<BasePost>();

    bool IsLoading = true;
    bool CanLoadMore = false;

    GetPostDto SearchQuary = new GetPostDto
        {
            Audience = Audience.All,
            Count = 30,
            Page = -1,
            Sort = SortType.New,
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.OnChange += StateHasChanged;
            SearchQuary = new GetPostDto
                {
                    Audience = Audience.All,
                    Count = 30,
                    Page = -1,
                    Sort = SortType.New,
                };
            await GetPosts();
        }
    }


    private async Task GetPosts()
    {
        IsLoading = true;
        await LoadMore();
        IsLoading = false;       
    }


    private async Task LoadMore()
    {
        // if (!ApiService.AuthService.IsAuth)
        //     return;

        IsLoading = true;
        SearchQuary.Page = SearchQuary.Page + 1;

        result = await ApiService.PostService.GetFeed(SearchQuary);

        if (result != null)
        {
            foreach (var item in result.Data)
            {
                Posts.Add(item);
            }

        }

        _CanLoadMore();
        IsLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// checks to see if the infinite loading should end or not
    /// </summary>
    private void _CanLoadMore()
    {
        if (result.TotalPage > SearchQuary.Page && result.TotalCount != 0)
            CanLoadMore = true;
        else
            CanLoadMore = false;
    }

    private async Task OnLoad(InfiniteScrollLoadEventArgs args)
    {
        try
        {
            args.Status = InfiniteScrollLoadStatus.Loading;
            await LoadMore();
            args.Status = InfiniteScrollLoadStatus.Ok;
        }
        catch(Exception ex)
        {
            
        }
    }

    private void VisitPost(Guid id)
    {
        Navigation.NavigateTo($"/posts/{id}");
    }
}