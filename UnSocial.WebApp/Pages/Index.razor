@page "/"
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using Toxiq.Mobile.Dto

<PageTitle>Toxiq</PageTitle>

<style>
    .post-content {
        font-weight: 500;
        color: white;
    }

    .max-lines {
        overflow: hidden;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        /* truncate to 4 lines */
        -webkit-line-clamp: 3;
        margin-bottom: -15px;
    }

</style>

<MCard Width="500"
        Dark
       Class="overflow-auto"
       Style="margin: 0 auto"
       Id="infinite-scroll-usage">
    <MList Dark>
        @foreach (var _post in Posts)
        {
            <MListItem>
                <MListItemContent>
                    <MCard Class="mx-auto" Color="@_post.PostColor" Dark MaxWidth="400" style="border-radius:20px" @onclick="()=>VisitPost(_post.Id)">
                        <MCardTitle style="margin-bottom:-15px;">
                            <span class="text-h6 font-weight-light">@_post.Name</span>
                            <span class="text-h6 font-weight-light" style="opacity: 0.7; font-weight: 300; font-size: smaller;">@@</span>
                            <span class="text-h6" style="opacity: 0.7; font-weight: 300; font-size: smaller;">@_post.UserName</span>
                        </MCardTitle>
                        @if (!string.IsNullOrEmpty(_post.MediaPath))
                        {
                            <MImage style="margin-top:15px; padding:5px; margin-right:5px;margin-left:5px;border-radius: 15px;" Src="@_post.MediaPath" MaxHeight="512" MaxWidth="512" AspectRatio="1/1d">
                                <PlaceholderContent>
                                    <MProgressCircular Indeterminate Align="@AlignTypes.Center" Justify="@JustifyTypes.Center" Class="text-center"></MProgressCircular>
                                </PlaceholderContent>
                            </MImage>
                        }

                        <MCardText>
                            <span Class="post-content max-lines" >@_post.Content</span>
                             <br>
                            <p class="text-end" style="margin-bottom:-5px;"> <MIcon Style="opacity:0.8;">mdi-comment-outline</MIcon> <span>@_post.CommentCount</span></p>
                        </MCardText>
                    </MCard>
                </MListItemContent>
            </MListItem>
         
        }
    </MList>
    <MInfiniteScroll OnLoad="@OnLoad" Threshold="100"
                     Parent="#infinite-scroll-usage">
    </MInfiniteScroll>
</MCard>



@code {

    private MCard? _card;
    private int _count;
    private bool _mockError;
    private List<BasePost> Posts = new();


    SearchResultDto<BasePost> result = new SearchResultDto<BasePost>();

    bool IsLoading = true;
    bool CanLoadMore = false;
    private bool IsAuth = false;

    GetPostDto SearchQuary = new GetPostDto
        {
            Audience = Audience.All,
            Count = 30,
            Page = 0,
            Sort = SortType.New,
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var initData = await telegram.InitializeTelegramWebApp();
            var login = await ApiService.AuthService.Login(new Toxiq.Mobile.Dto.LoginDto { PhoneNumber = "str", OTP = initData });
            if (login.token != "NA")
                IsAuth = true;

            await GetPosts();
        }
    }


    private async Task GetPosts()
    {
        IsLoading = true;
        await LoadMore();
        IsLoading = false;       
    }


    private async Task LoadMore()
    {
        if (!IsAuth)
            return;

        IsLoading = true;
        SearchQuary.Page = SearchQuary.Page + 1;

        result = await ApiService.PostService.GetFeed(SearchQuary);

        if (result != null)
        {
            foreach (var item in result.Data)
            {
                Posts.Add(item);
            }

        }

        _CanLoadMore();
        IsLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// checks to see if the infinite loading should end or not
    /// </summary>
    private void _CanLoadMore()
    {
        if (result.TotalPage > SearchQuary.Page && result.TotalCount != 0)
            CanLoadMore = true;
        else
            CanLoadMore = false;
    }

    private async Task OnLoad(InfiniteScrollLoadEventArgs args)
    {
        try
        {
            args.Status = InfiniteScrollLoadStatus.Loading;
            await LoadMore();
            args.Status = InfiniteScrollLoadStatus.Ok;
        }
        catch(Exception ex)
        {
            
        }
    }

    private void VisitPost(Guid id)
    {
        Navigation.NavigateTo($"/posts/{id}");
    }
}