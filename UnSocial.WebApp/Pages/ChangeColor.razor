@page "/changeColor"
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using Toxiq.Mobile.Dto
@attribute [Authorize]
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService
@inject ITelegramJsInterop telegram
@inject IJSRuntime JS
@using Masa.Blazor
@using Masa.Blazor.Presets
@inject AppState AppState

<style>
    .profile-preview {
        min-height: 170px;
        border-radius: 20px;
        padding: 20px;
        margin-bottom: 20px;
        transition: background-color 0.3s ease;
    }

    .bio-input {
        background: transparent !important;
        color: white !important;
        border: none !important;
        font-size: 14px;
        line-height: 1.5;
        resize: none;
        width: 100%;
        min-height: 80px;
        padding: 0;
        outline: none;
    }

        .bio-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

    .color-selector {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin: 20px 0;
    }

    .color-option {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        cursor: pointer;
        transition: transform 0.2s;
        border: 2px solid transparent;
    }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option.selected {
            border: 2px solid white;
            transform: scale(1.15);
        }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: bold;
        margin-bottom: 10px;
        display: block;
    }

    .continue-button {
        background-color: white;
        color: black;
        padding: 12px 24px;
        border-radius: 10px;
        border: none;
        font-weight: bold;
        cursor: pointer;
        width: 100%;
        margin-top: 20px;
    }

        .continue-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .date-inputs {
        display: flex;
        gap: 10px;
    }

    .form-select {
        flex: 1;
        padding: 10px;
        font-size: 14px;
        background-color: #2a2a2a;
        color: white;
        border: 1px solid #444;
        border-radius: 10px;
    }

        .form-select:focus {
            border-color: white;
            outline: none;
        }

    .error-message {
        color: #ff6b6b;
        font-size: 14px;
        margin-top: 10px;
    }
</style>

<div style="max-width: 500px; margin: 0 auto; padding: 20px;">
    @if (Profile == null)
    {
        <MProgressCircular Indeterminate
                           Size="40"
                           Color="White"
                           Width="4"
                           Style="display: block; margin: 50px auto;">
        </MProgressCircular>
    }
    else
    {
        <h2 style="font-weight: bold; font-size: 20px; margin-bottom: 20px;">Edit Profile</h2>

        <!-- Profile Preview -->
        <div class="profile-preview" style="background-color: @Profile.ProfileColor">
            <div style="font-weight: bold; font-size: 20px; margin-bottom: 5px;">
                @@@Profile.UserName
            </div>
            <textarea class="bio-input"
                      placeholder="Enter your Bio"
                      @bind="Profile.Bio"
                      maxlength="64"
                      rows="4"></textarea>
        </div>

        <!-- Date of Birth -->
        <div class="form-group">
            <label class="form-label">Date of birth</label>
            <div class="date-inputs">
                <select class="form-select" @bind="Month">
                    <option value="0">Month</option>
                    @for (int i = 1; i <= 12; i++)
                    {
                        <option value="@i">@(new DateTime(2000, i, 1).ToString("MMMM"))</option>
                    }
                </select>

                <select class="form-select" @bind="Day">
                    <option value="0">Day</option>
                    @for (int i = 1; i <= DateTime.DaysInMonth(Year == 0 ? 2000 : Year, Month == 0 ? 1 : Month); i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>

                <select class="form-select" @bind="Year">
                    <option value="0">Year</option>
                    @for (int i = MaxDate.Year; i >= MinDate.Year; i--)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
        </div>

        <!-- Gender -->
        <div class="form-group">
            <label class="form-label">Gender</label>
            <select class="form-select" value="@Profile.Gender" @onchange="HandleGenderChange" style="width: auto; min-width: 150px;">
                <option value="">Select Gender</option>
                @foreach (var gender in Enum.GetValues<Gender>().Where(g => g != Gender.Null))
                {
                    <option value="@gender">@GetGenderDisplay(gender)</option>
                }
            </select>
        </div>

        <!-- Color Selection -->
        <div class="form-group">
            <label class="form-label">Profile Color</label>
            <div class="color-selector">
                @foreach (var color in colors)
                {
                    <div class="color-option @(Profile.ProfileColor == color.Value ? "selected" : "")"
                         style="background-color: @color.Value"
                         @onclick="() => SelectColor(color.Value)">
                    </div>
                }
            </div>
        </div>

        @if (!string.IsNullOrEmpty(ValidationMessage))
        {
            <div class="error-message">
                @foreach (var line in ValidationMessage.Split('\n'))
                {
                    <div>• @line</div>
                }
            </div>
        }

        <button class="continue-button" @onclick="SubmitProfile" disabled="@IsLoading">
            @if (IsLoading)
            {
                <span>Saving...</span>
            }
            else
            {
                <span>@(CanGoBack ? "Save" : "Continue")</span>
            }
        </button>
    }
</div>

@code {
    public UserProfile Profile = null;
    bool IsLoading = false;
    bool CanGoBack = true; // Default to true for edit mode

    private class ColorOption
    {
        public string Label { get; set; }
        public string Value { get; set; }
    }

    private ColorOption[] colors = new[]
    {
        new ColorOption { Label = "Gray", Value = "#8a8a8a" },
        new ColorOption { Label = "Purple", Value = "#5a189a" },
        new ColorOption { Label = "Red", Value = "#800e13" },
        new ColorOption { Label = "Blue", Value = "#375191" },
        new ColorOption { Label = "Pink", Value = "#ff4bb4" },
        new ColorOption { Label = "Green", Value = "#588157" }
    };

    private int _month = 0;
    private int Month
    {
        get => _month;
        set
        {
            _month = value;
            UpdateDate();
        }
    }

    private int _day = 0;
    private int Day
    {
        get => _day;
        set
        {
            _day = value;
            UpdateDate();
        }
    }

    private int _year = 0;
    private int Year
    {
        get => _year;
        set
        {
            _year = value;
            UpdateDate();
            StateHasChanged(); // Refresh day options when year changes
        }
    }

    [Parameter]
    public DateTime MinDate { get; set; } = new DateTime(1989, 1, 1);

    [Parameter]
    public DateTime MaxDate { get; set; } = DateTime.Today;

    private string ValidationMessage { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppState.OnChange += LoadProfile;
        }
    }

    async void LoadProfile()
    {
        Profile = await ApiService.UserService.GetMe();
        if (Profile != null)
        {
            if (string.IsNullOrEmpty(Profile.ProfileColor))
            {
                Profile.ProfileColor = "#5a189a";
            }

            // Set date values from profile
            if (Profile.PubDateOfBirth != DateTime.MinValue)
            {
                _year = Profile.PubDateOfBirth.Year;
                _month = Profile.PubDateOfBirth.Month;
                _day = Profile.PubDateOfBirth.Day;
            }
            else
            {
                // Set defaults for new profile
                var today = DateTime.Today;
                _year = today.Year - 18; // Default to 18 years ago
                _month = 1;
                _day = 1;
            }
        }
        StateHasChanged();
    }

    private void SelectColor(string color)
    {
        Profile.ProfileColor = color;
        StateHasChanged();
    }

    private void HandleGenderChange(ChangeEventArgs e)
    {
        if (Enum.TryParse<Gender>(e.Value?.ToString(), out Gender selectedGender))
        {
            Profile.Gender = selectedGender;
        }
    }

    private string GetGenderDisplay(Gender gender)
    {
        return gender switch
        {
            Gender.Male => "♂️ Male",
            Gender.Female => "♀️ Female",
            _ => gender.ToString()
        };
    }

    private void UpdateDate()
    {
        if (Year > 0 && Month > 0 && Day > 0)
        {
            try
            {
                var daysInMonth = DateTime.DaysInMonth(Year, Month);
                var validDay = Math.Min(Day, daysInMonth);
                var newDate = new DateTime(Year, Month, validDay);

                if (newDate >= MinDate && newDate <= MaxDate)
                {
                    Profile.PubDateOfBirth = newDate;
                    ValidationMessage = "";
                }
            }
            catch
            {
                // Invalid date combination
            }
        }
    }

    private bool ValidateAll()
    {
        ValidationMessage = "";
        var messages = new List<string>();

        // Check color
        if (string.IsNullOrEmpty(Profile.ProfileColor))
            messages.Add("Please select a profile color");

        // Check gender
        if (Profile.Gender == Gender.Null || Profile.Gender == null)
            messages.Add("Please select a gender");

        // Check date
        if (Year == 0 || Month == 0 || Day == 0)
        {
            messages.Add("Please select a valid date of birth");
        }
        else if (Profile.PubDateOfBirth.Year == DateTime.Now.Year)
        {
            messages.Add("Please select a valid date of birth");
        }

        if (messages.Any())
        {
            ValidationMessage = string.Join("\n", messages);
            return false;
        }

        return true;
    }

    async Task SubmitProfile()
    {
        if (!ValidateAll())
            return;

        IsLoading = true;

        try
        {
            await ApiService.UserService.EditProfile(Profile);
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ValidationMessage = "Failed to save profile. Please try again.";
        }
        finally
        {
            IsLoading = false;
        }
    }
}