@using Microsoft.AspNetCore.Components;
@using Microsoft.FluentUI.AspNetCore.Components;
@using Toxiq.Mobile.Dto
@inject NavigationManager Navigation
@inject Unsocial.WebApp.Services.IApiService ApiService


<div class="TypeBurnPost" style="clip-path: border-box;min-width: 100%; padding: 15px; background: linear-gradient(0deg, @BottomColor 0%, @TopColor 100%); border-radius: 20px; border: 3px @_post.PostColor solid; flex-direction: column; justify-content: flex-start; align-items: flex-start; gap: 10px; display: inline-flex">
    <div class="NameSection" style="align-self: stretch; justify-content: flex-start; align-items: center; gap: 5px; display: inline-flex" @onclick="()=>VisitOP(_post.UserName)">
        <div style=" height: 14px; color: white; font-size: 14px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@_post.Name</div>
        <div class="Username" style="color: rgba(255, 255, 255, 0.60); font-size: 14px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@_post.UserName</div>
    </div>
    <div class="Content" style="white-space: pre-wrap;align-self: stretch; color: white; font-size: 14px; font-family: Roboto; font-weight: 500; word-wrap: break-word">@_post.Content</div>

    @if (_post.PostMedia.Count != 0)
    {
        <div class="Postmedia" style=" flex-direction: column; justify-content: center; align-items: center; display: flex;width: -webkit-fill-available;">
            <img class="Postmedia" style="max-width: 100%; border-radius: 20px" src="@_post.PostMedia[0].MediaPath" />
        </div>
    }
    @if (_post.ReplyRefId != null)
    {
        <div class="ReplyCard" style="border-color: #1f1f1f;border-style: solid;align-self: normal;padding: 10px; background: @BottomColor; box-shadow: 0px 2px 20px rgba(0, 0, 0, 0.25); border-radius: 10px; overflow: hidden; flex-direction: column; justify-content: flex-start; align-items: flex-start; gap: 5px; display: flex">
            <div class="Header" style="width: 270px; justify-content: flex-start; align-items: flex-start; display: inline-flex">
                <div class="NameSection" style="width: 270px; height: 17px; justify-content: flex-start; align-items: center; gap: 5px; display: flex">
                    <div class="Username" style="flex: 1 1 0; height: 18px; color: rgba(255, 255, 255, 0.60); font-size: 14px; font-family: Roboto; font-weight: 400; word-wrap: break-word">@replypost.UserName</div>
                    <div class="AnonIcon" hidden style="width: 17px; height: 17px; justify-content: center; align-items: center; display: flex">
                        <div class="Vector" style="width: 17px; height: 17px; background: white"></div>
                    </div>
                </div>
            </div>
            <div class="Test" style="align-self: stretch; height: 16px; color: white; font-size: 14px; font-family: Roboto; font-weight: 500; word-wrap: break-word">@replypost.Content</div>
        </div>
    }
    <div class="PostInteraction" style="align-self: stretch; justify-content: space-between; align-items: center; display: inline-flex">
        <div class="LikeButton" style="justify-content: flex-start; align-items: center; gap: 5px; display: flex">
            <div class="UpvoteIcon" style="width: 24px; height: 24px; padding-top: 1px; padding-bottom: 1.82px; padding-left: 3px; padding-right: 3.25px; justify-content: center; align-items: center; display: flex">
                <FluentIcon style="width: 17.75px; height: 21.18px; fill: white" Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ThumbLike())" />
            </div>
            <div style="color: white; font-size: 14px; font-family: Roboto; font-weight: 700; word-wrap: break-word">@_post.SupportCount</div>
            <div class="DownvoteIcon" style="width: 17.75px; height: 21.18px; flex-direction: column; justify-content: center; align-items: center; display: inline-flex">
                <FluentIcon style="width: 17.75px; height: 21.18px; fill: white" Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ThumbDislike())" />
            </div>
        </div>
        <div class="Comments" style="height: 24px; position: relative">
            <div style="left: 29px; top: 3px; position: absolute; color: white; font-size: 14px; font-family: Roboto; font-weight: 700; word-wrap: break-word">@_post.CommentCount</div>
            <div class="CommentIcon" style="width: 24px; height: 24px; padding-top: 3px; padding-bottom: 2px; padding-left: 2px; padding-right: 2px; left: 0px; top: 0px; position: absolute; justify-content: center; align-items: center; display: inline-flex">
                <FluentIcon style="width: 17.75px; height: 21.18px; fill: white" Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Comment())" />
            </div>
        </div>
        <div class="EchoIcon" style="width: 24px; height: 24px; padding-top: 3px; padding-bottom: 3px; padding-left: 3px; padding-right: 2.01px; justify-content: center; align-items: center; display: flex">
            <FluentIcon style="width: 17.75px; height: 21.18px; fill: white" Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Share())" />

        </div>
    </div>
</div>


@code {
    [Parameter]
    public BasePost _post { get; set; }

    private string TopColor = "black";
    private string BottomColor = "black";

    private BasePost replypost { get; set; }


    protected override void OnInitialized()
    {
        LoadPost();
    }

    private async Task LoadPost()
    {
        switch (_post.Type)
        {
            case PostType.Burn:
                TopColor = "black"; BottomColor = _post.PostColor;
                break;
            case PostType.Wall:
                TopColor = _post.PostColor; BottomColor = _post.PostColor;
                break;
            case PostType.Text:
                TopColor = "black"; BottomColor = "black";
                break;
        }

        switch (_post.ReplyType)
        {
            case ReplyType.Text:
                replypost = await ApiService.PostService.GetPost((Guid)_post.ReplyRefId);
                break;
            case ReplyType.Note:
                var temp = await ApiService.NotesService.GetNote((Guid)_post.ReplyRefId);
                replypost.Content = temp.Content;
                replypost.UserName = "Anon";
                replypost.Name = "";
                //_border.BackgroundColor = _post.PostColor;
                break;
            case ReplyType.Comment:
            // var tempc = await ApiService.CommentService.Getc((Guid)_post.ReplyRefId);
            // replypost.Content = tempc.Content;
            // replypost.Name = tempc.Name;
            // replypost.UserName = tempc.UserName;
            // TypeIcon.Icon(new MauiIcon() { Icon = FluentIcons.Comment48, IconSize = 18 }.Icon);
            // break;
            default:
                break;
        }
    }



    private void VisitOP(string username)
    {
        Navigation.NavigateTo($"/profile/{username}");
    }
}
